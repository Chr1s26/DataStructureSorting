package Sorting;

public class QuickSort {

    public static void main(String[] args) {
        int[] arr = {31, 12, 55, 26, 17, 14, 43, 22};

        // Sort using QuickSort
        arr = selectPivot(arr);

        // Print sorted array
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + ",");
        }
    }

    public static int[] selectPivot(int[] arr) {
        // Pass entire range to sort
        arr = sort(arr, arr.length - 1, 0);
        return arr;
    }

    public static int[] sort(int[] arr, int pivot, int secondpointer) {
        // Base case: stop recursion when subarray size is <= 1
        if (secondpointer >= pivot) {
            return arr;
        }

        int m = secondpointer; // Start with the second pointer
        int count = 0;

        // Partitioning logic
        for (int i = secondpointer; i < pivot; i++) {
            if (arr[i] < arr[pivot]) {
                if (count != 0) {
                    m++;
                }
                count++;
                if (arr[m] > arr[i]) {
                    // Swap arr[m] and arr[i]
                    int temp = arr[m];
                    arr[m] = arr[i];
                    arr[i] = temp;
                }
            }
        }

        // Move pivot to its correct position
        m++;
        int temp = arr[pivot];
        arr[pivot] = arr[m];
        arr[m] = temp;

        // Recursive calls for left and right partitions
        arr = sort(arr, m - 1, 0); // Left side
        arr = sort(arr, arr.length, m + 1);         // Right side

        return arr;
    }
}
